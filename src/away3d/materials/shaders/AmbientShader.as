package away3d.materials.shaders{	import away3d.containers.*;	import away3d.core.*;	import away3d.core.base.*;	import away3d.core.draw.*;	import away3d.core.math.*;	import away3d.core.render.*;	import away3d.core.utils.*;	import away3d.materials.*;		import flash.display.*;	import flash.geom.*;	import flash.utils.*;	    public class AmbientShader extends AbstractShader    {		use namespace arcane;                public var color:uint;                public function AmbientShader(init:Object = null)        {        	super(init);        }				public override function updateMaterial(source:Object3D, view:View3D):void        {        	clearLightingShapeDictionary();        }                public override function clearFaceDictionary(source:Object3D, view:View3D):void        {        	for each (_faceVO in _faceDictionary) {        		if (source == _faceVO.source) {	        		if (!_faceVO.cleared)	        			_faceVO.clear();	        		_faceVO.invalidated = true;	        	}        	}        }                public override function renderLayer(tri:DrawTriangle, layer:Sprite):void        {        	super.renderLayer(tri, layer);    		        	for each (ambient in tri.source.session.lightarray.ambients)        	{        		if (_lights.numLights > 1) {					_shape = getLightingShape(layer, ambient);		        	_shape.blendMode = blendMode;		        	_graphics = _shape.graphics;		        } else {		        	_graphics = layer.graphics;		        }	        					_source.session.renderTriangleBitmap(ambient.ambientBitmap, _mapping, tri.v0, tri.v1, tri.v2, smooth, false, _graphics);        	}						if (debug)                tri.source.session.renderTriangleLine(0, 0x0000FF, 1, tri.v0, tri.v1, tri.v2);        }		        public override function renderShader(face:Face):void        {			for each (ambient in _source.session.lightarray.ambients)	    	{				_faceVO.bitmap.draw(ambient.ambientBitmap, null, null, blendMode);	    	}	    		    	for each (directional in _source.session.lightarray.directionals)	    	{				_faceVO.bitmap.draw(directional.ambientBitmap, null, null, blendMode);	    	}        }    }}