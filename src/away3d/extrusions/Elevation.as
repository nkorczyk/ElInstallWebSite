package away3d.extrusions{   	import flash.display.BitmapData;	import away3d.core.math.Number3D;	public class Elevation {				public function Elevation()        {		}				public function generate(sourceBmd:BitmapData, channel:String = "r", subdivisionX:int = 10, subdivisionY:int = 10, scalingX:Number = 1, scalingY:Number = 1, elevate:Number = .5):Array		{			var w:Number = sourceBmd.width;			var h:Number = sourceBmd.height;			var i:int;			var j:int; 			var row:int = 0;	 		var col:int = 0;			var totalArray:Array = [];			var tmpArray:Array = [];			var tmpconcat:Array = [];			var x:Number = 0;			var y:Number = 0;			var z:Number = 0;			var color:uint;						var halfw:Number = w*.5;			var halfh:Number = h*.5;			var cha:Number;			 			while (i<(w*h)){									x = col-halfw;					y = row-halfh;					color = (channel == "a")? sourceBmd.getPixel32(col, row) : sourceBmd.getPixel(col, row);					 					switch(channel){						case "a":							cha = color >> 24 & 0xFF;							break;						case "r":							cha = color >> 16 & 0xFF;							break;						case "g":							cha = color >> 8 & 0xFF;							break;						case "b":							cha = color & 0xFF;							break;					}										z = cha*elevate;					tmpArray.push(new Number3D(x*scalingX, y*scalingY, z));					col+= subdivisionX;										if(col>w){						var tmp:Array = new Array();						tmp = tmp.concat(tmpArray);						totalArray.push(tmp);						tmpArray = new Array();						row += subdivisionY;						col = 0;					}					i=row*col;				}								tmp = new Array();				for(i = totalArray.length-1;i>0;i--){					tmp.push(totalArray[i]);				}								return tmp;			 			/*			//would probably be beter... next update!!			for(i = 0; i < h; i+=subdivisionY)			{				tmpArray = [];				for(j = 0; j < w; j+=subdivisionX)				{					color = (channel == "a")? sourceBmd.getPixel32(j, i) : sourceBmd.getPixel(j, i);					x = (halfw-j);					y = (halfh-i);										switch(channel){						case "a":							cha = color >> 24 & 0xFF;							break;						case "r":							cha = color >> 16 & 0xFF;							break;						case "g":							cha = color >> 8 & 0xFF;							break;						case "b":							cha = color & 0xFF;							break;					}										z = cha*elevate;					tmpArray.push(new Number3D(x*scalingX, y*scalingY, z));				}				tmpconcat = [];				totalArray.push(tmpconcat.concat(tmpArray));			}			return totalArray;			*/			 		}			}}